!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("@angular/core"),require("@angular/cdk/keycodes"),require("@angular/forms"),require("@angular/common"),require("@angular/material")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/cdk/keycodes","@angular/forms","@angular/common","@angular/material"],r):r((e.merlot=e.merlot||{},e.merlot.js=e.merlot.js||{},e.merlot.js.ui={}),e.ng.core,null,null,null,null)}(this,function(e,r,t,n,o,a){"use strict";var i=function(){function e(){this.ngModelChange=new r.EventEmitter}return e.prototype.ngOnInit=function(){this.ui=this.schema.ui||{}},e.prototype.updateModel=function(e){this.ngModelChange.emit(e)},e.decorators=[{type:r.Component,args:[{selector:"app-slider",template:'<mat-slider [min]="schema.min" [max]="schema.max" [step]="ui.steps || 1" [(ngModel)]="iModel" (ngModelChange)="updateModel($event)"></mat-slider>\n            <mat-error *ngIf="control?.errors?.required">Dieser Wert ist eine Pflichtangabe.</mat-error>\n            <mat-error *ngIf="control?.errors?.min">Dieser Zahlenwert darf nicht kleiner als {{control.errors.min.min}} sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.max">Dieser Zahlenwert darf nicht größer als {{control.errors.max.max}} sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.minlength">Dieser Wert muss mindestens {{control.errors.minlength.requiredLength}}\n              Zeichen lang sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.maxlength">Dieser Wert darf höchstens {{control.errors.maxlength.requiredLength}}\n              Zeichen lang sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.enumValidator">Dieser Wert ist nicht zulässig. Erlaubte Werte sind: {{\n              control.errors.enumValidator.allowedValues.join(", ") }}</mat-error>'}]}],e.ctorParameters=function(){return[]},e.propDecorators={control:[{type:r.Input,args:["control"]}],iModel:[{type:r.Input,args:["iModel"]}],schema:[{type:r.Input,args:["schema"]}],ngModelChange:[{type:r.Output}]},e}(),l=function(){function e(){this.ngModelChange=new r.EventEmitter}return e.prototype.ngOnInit=function(){this.ui=this.schema.ui||{}},e.prototype.updateModel=function(e){this.ngModelChange.emit(e)},e.decorators=[{type:r.Component,args:[{selector:"app-input",template:'<mat-form-field>\n              <input matInput placeholder="{{ui.label}}" [(ngModel)]="iModel" (ngModelChange)="updateModel($event)">\n             </mat-form-field>\n             <mat-error *ngIf="control?.errors?.required">Dieser Wert ist eine Pflichtangabe.</mat-error>\n            <mat-error *ngIf="control?.errors?.min">Dieser Zahlenwert darf nicht kleiner als {{control.errors.min.min}} sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.max">Dieser Zahlenwert darf nicht größer als {{control.errors.max.max}} sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.minlength">Dieser Wert muss mindestens {{control.errors.minlength.requiredLength}}\n              Zeichen lang sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.maxlength">Dieser Wert darf höchstens {{control.errors.maxlength.requiredLength}}\n              Zeichen lang sein.</mat-error>\n            <mat-error *ngIf="control?.errors?.enumValidator">Dieser Wert ist nicht zulässig. Erlaubte Werte sind: {{\n              control.errors.enumValidator.allowedValues.join(", ") }}</mat-error>'}]}],e.ctorParameters=function(){return[]},e.propDecorators={control:[{type:r.Input,args:["control"]}],iModel:[{type:r.Input,args:["iModel"]}],schema:[{type:r.Input,args:["schema"]}],ngModelChange:[{type:r.Output}]},e}(),s=function(){function e(){this.ngModelChange=new r.EventEmitter}return e.prototype.ngOnInit=function(){this.ui=this.schema.ui||{}},e.prototype.updateModel=function(e){this.ngModelChange.emit(e)},e.decorators=[{type:r.Component,args:[{selector:"app-checkbox",template:'<mat-checkbox [(ngModel)]="iModel" (ngModelChange)="updateModel($event)">{{ui.label}}</mat-checkbox>'}]}],e.ctorParameters=function(){return[]},e.propDecorators={iModel:[{type:r.Input,args:["iModel"]}],schema:[{type:r.Input,args:["schema"]}],ngModelChange:[{type:r.Output}]},e}(),m=function(){function e(){this.ngModelChange=new r.EventEmitter,this.separatorKeysCodes=[t.ENTER,t.COMMA],this.visible=!0,this.selectable=!0,this.removable=!0,this.addOnBlur=!0}return e.prototype.ngOnInit=function(){this.ui=this.schema.ui||{}},e.prototype.updateModel=function(e){this.ngModelChange.emit(e)},e.prototype.add=function(e){var r=e.input,t=e.value;(t||"").trim()&&this.iModel.push(new n.FormControl(t)),r&&(r.value="")},e.prototype.remove=function(e){this.iModel.removeAt(e)},e.decorators=[{type:r.Component,args:[{selector:"app-chip-input",template:'<mat-form-field class="demo-chip-list">\n              <mat-chip-list #chipList>\n                <mat-chip *ngFor="let instance of iModel.controls; index as i" [selectable]="selectable" [removable]="removable" (remove)="remove(i)">\n                  {{instance.value}}\n                  <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n                </mat-chip>\n                <input [placeholder]="ui.label" [matChipInputFor]="chipList" [matChipInputSeparatorKeyCodes]="separatorKeysCodes" [matChipInputAddOnBlur]="addOnBlur"\n                  (matChipInputTokenEnd)="add($event)" />\n              </mat-chip-list>\n            </mat-form-field>'}]}],e.ctorParameters=function(){return[]},e.propDecorators={iModel:[{type:r.Input,args:["iModel"]}],schema:[{type:r.Input,args:["schema"]}],ngModelChange:[{type:r.Output}]},e}(),u=function(){function e(){this.ngModelChange=new r.EventEmitter,this.transformediModel=[]}return e.prototype.ngOnInit=function(){var r=this;this.iModel.controls.forEach(function(e){r.transformediModel.push(e.value)}),this.ui=this.schema.ui||{}},e.prototype.updateModel=function(e){var r=this;this.iModel.controls=[],e.forEach(function(e){r.iModel.push(new n.FormControl(e))}),this.iModel.controls.length||this.iModel.push(new n.FormControl),this.ngModelChange.emit(this.iModel)},e.decorators=[{type:r.Component,args:[{selector:"app-multiselect",template:'<mat-form-field>\n              <mat-select [placeholder]="ui.label" [(ngModel)]="transformediModel" (ngModelChange)="updateModel($event)" multiple>\n                <mat-option *ngFor="let entry of schema.enum" [value]="entry">{{entry}}</mat-option>\n              </mat-select>\n            </mat-form-field>\n            <mat-error *ngIf="control?.errors?.required">Dieser Wert ist eine Pflichtangabe.</mat-error>\n            <mat-error *ngIf="control?.errors?.minNumber">Es müssen mindestens {{\n              control.errors.minNumber.requiredElements}} Elemente ausgewählt werden.</mat-error>\n            <mat-error *ngIf="control?.errors?.enumValidator">Dieser Wert ist nicht zulässig. Erlaubte Werte sind: {{\n              control.errors.enumValidator.allowedValues.join(", ") }}</mat-error>'}]}],e.ctorParameters=function(){return[]},e.propDecorators={control:[{type:r.Input,args:["control"]}],iModel:[{type:r.Input,args:["iModel"]}],schema:[{type:r.Input,args:["schema"]}],ngModelChange:[{type:r.Output}]},e}(),c=function(){function e(){this.templates=[{name:"checkbox",component:s},{name:"chipsInput",component:m},{name:"multiselect",component:u},{name:"input",component:l},{name:"slider",component:i}],this.defaultTemplates={String:l,Number:l,Boolean:s}}return e.decorators=[{type:r.Injectable}],e.ctorParameters=function(){return[]},e}(),p=function(){function e(){}return e.decorators=[{type:r.NgModule,args:[{imports:[a.MatCheckboxModule,a.MatChipsModule,a.MatIconModule,a.MatInputModule,a.MatSelectModule,a.MatSliderModule,o.CommonModule,n.FormsModule],providers:[c],declarations:[i,l,s,m,u],entryComponents:[s,m,l,u,i]}]}],e}();e.MerlotMaterialModule=p,e.MerlotMaterial=c,Object.defineProperty(e,"__esModule",{value:!0})});